---
version: '3.9'

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.4.3-python3.9
  user: "${AIRFLOW_UID}:0"
  env_file: 
    - ./airflow/airflow.env
  volumes:
    - ./airflow/airflow2.4.3.cfg:/opt/airflow/airflow.cfg  # custom cfg with run_id (incl timestamp) removed from log_filename_template.
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
    - ./outputs:/opt/airflow/outputs

x-airflow-depends-on:
  &airflow-depends-on
  postgres:
    condition: service_healthy
  airflow-init:
    condition: service_completed_successfully

services:
  postgres:
    image: postgres:15.1
    container_name: postgres
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    env_file:
      - ./airflow/airflow.env

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    restart: on-failure
    expose:
      - 8793
    depends_on:
      <<: *airflow-depends-on

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    restart: always
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5
    depends_on:
      <<: *airflow-depends-on
  
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    depends_on:
      - postgres
  
  database:
    restart: always
    image: postgres:15.1
    container_name: db1
    expose:
      - 5432
    environment:
      POSTGRES_PASSWORD: root
    volumes:
      - ./database/setup.sql:/docker-entrypoint-initdb.d/setup.sql

  dashboard:
    restart: always
    build: ./dashboard
    image: app_frontend:7
    container_name: dashboard1
    working_dir: /src
    command: gunicorn --bind 0.0.0.0:8050 wsgi:app -w 1
    tty: true
    ports:
      - 8050:8050
    volumes:
      - ./dashboard/src:/src 
  
  ml:
    image: jupyter/datascience-notebook:notebook-6.5.2 #jupyter/pyspark-notebook:spark-3.3.1
    container_name: jupyter1
    ports:
      - 8888:8888
    tty: true
    volumes:
      - ./ml/notebooks:/home/jovyan/work/notebooks/
      - ./ml/src:/home/jovyan/work/src
      - ./ml/data:/home/jovyan/work/data/
    environment:
      - PYTHONPATH=/home/jovyan/work/src
